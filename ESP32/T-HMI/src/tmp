      if (error) {
	Serial.printf("Failed to parse JSON: %s\n", error.f_str());
	Serial.printf(": %s :\n", displayRequest.displayLine);
      }
      else {
	switch(displayState)
	  {
	  case DISPLAY_MPH:
	    segmentDisplayLetter = 'M';
	    Vd = jsonDoc["ehz"];
	    displayValue = Vd / 10.0;
	    break;
	  case DISPLAY_AMP:
	    segmentDisplayLetter = 'A';
	    Vd = 0.0;
	    Vq = 0.0;
	    Vd = jsonDoc["Vd"];
	    Vq = jsonDoc["Vq"];
	  
	    Serial.print("Vd: ");
	    Serial.println(Vd);
	    Serial.print("Vq: ");
	    Serial.println(Vq);

	    displayValue = sqrt((Vd * Vd) + (Vq * Vq));
	    break;
	  case DISPLAY_EHRZ:
	    segmentDisplayLetter = 'E';
	    displayValue = jsonDoc["ehz"];
	    break;
	  case DISPLAY_BAT:
	    segmentDisplayLetter = 'B';
	    displayValue = jsonDoc["vbus"];
	    break;
	  default:
	    break;
	  }
	segmentDisplayInt = displayValue;
	segmentDisplayInt = 333;
      }


// this is blocked unless a xQueueReceive() is received
void queueTask2(void *parameter) {
  char buffer[128];

  while (true) {
    if (xQueueReceive(displayQueue, &displayDataRequest, portMAX_DELAY) == pdPASS) {
      DeserializationError error = deserializeJson(jsonDoc, displayDataRequest.displayLine);

      Serial.printf("Received queue: %s\n", displayDataRequest.displayLine);

      if (!error) {
        // Now that data is received, you can print and use it
        // Optionally, you can also process displayValue, Vd, and Vq here
        Serial.println("JSON worked");
      } else {
        Serial.println("JSON Deserialization failed");
      }

      vTaskDelay(100 / portTICK_PERIOD_MS);
    }
  }
}

void queueTask(void *parameter) {
  char buffer[128];

  int displayValue = 0;
  float Vd = 0.0;
  float Vq = 0.0;

  while (true) {
    if (xQueueReceive(displayQueue, &displayRequest, portMAX_DELAY) == pdPASS) {
      DeserializationError error = deserializeJson(jsonDoc, displayRequest.displayLine);
      Serial.printf("Received queue: %s\n", displayRequest.displayLine);

      vTaskDelay(100 / portTICK_PERIOD_MS);
    }
  }
}
