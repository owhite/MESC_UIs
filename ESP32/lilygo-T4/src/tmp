#include <WiFi.h>
#include <WiFiUdp.h>

Create a function taht will be a separate ESP32 task called initUDPService(). The ssid is set with the variable config.ssid, the password is set with config.password. The IP address will be fixed, and set with config.local_IP. Besure to also create this as a task:

void initUDPService() {
  // start Wifi
  // set IP address
  // start a FreeRTOS task
  xTaskCreate(udpTask, "ESP-NOW Task", 4096, NULL, 1, NULL);
}

void udpTask(void *pvParameter) {
  while (1) {
    vTaskDelay(100 / portTICK_PERIOD_MS);  // Delay to prevent blocking other tasks
  }
}


  WiFi.begin((const char*)config.ssid, (const char*)config.password);

  // Wait for the WiFi connection to be established
  while (WiFi.status() != WL_CONNECTED) {
    delay(100);
    Serial.print("Connecting to ");
    Serial.println(config.ssid);
  }
  Serial.println("Connected to WiFi");

  if (esp_now_add_peer(&peerInfo) != ESP_OK) {
    Serial.println("Failed to add peer");
  } else {
    Serial.println("Peer added");
  }

  // Optionally, start a FreeRTOS task for ESP-NOW communication
  xTaskCreate(espNowTask, "ESP-NOW Task", 4096, NULL, 1, NULL);
}

// Task to manage ESP-NOW communication
void espNowTask(void *pvParameter) {
  while (1) {
    // ESP-NOW communication can be processed here
    // This loop will keep running for ESP-NOW-related tasks
    vTaskDelay(100 / portTICK_PERIOD_MS);  // Delay to prevent blocking other tasks
  }
}

// ESP-NOW Send and Receive Callback functions
void onDataSent(const uint8_t *mac_addr, esp_now_send_status_t status) {
  Serial.println(status == ESP_NOW_SEND_SUCCESS ? "ESP-NOW Send Success" : "ESP-NOW Send Fail");
}

void onDataRecv(const uint8_t *mac_addr, const uint8_t *data, int len) {
  Serial.print("Received ESP-NOW data: ");
  for (int i = 0; i < len; i++) {
    Serial.write(data[i]);
  }
  Serial.println();
}
