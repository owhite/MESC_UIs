    def init_ui(self):
        # Central widget for main layout
        central_widget = QWidget(self)
        self.setCentralWidget(central_widget)

        # Label displays internet status
        self.wifi_label = QLabel('wifi', self)
        self.wifi_label.setAlignment(Qt.AlignCenter)
        font = self.wifi_label.font()
        font.setPointSize(30)
        font.setBold(True)
        self.wifi_label.setFont(font)

        # Label at top to display stuff
        self.status_label = QLabel('MESC Logger', self)
        self.status_label.setAlignment(Qt.AlignCenter)
        font = self.status_label.font()
        font.setPointSize(32)
        self.status_label.setFont(font)

        self.msgs.initHostStatusLabel(self.status_label)

        # Create the four buttons with larger font size
        self.log_button = QPushButton('LOG', self)
        font = self.log_button.font()
        font.setPointSize(60)
        self.log_button.setFont(font)
        self.log_button.setFocusPolicy(Qt.NoFocus)
        self.log_button.clicked.connect(self.log_button_clicked)
        self.index_to_widget[0] = self.log_button

        self.show_button = QPushButton('SHOW', self)
        font = self.show_button.font()
        font.setPointSize(60)
        self.show_button.setFont(font)
        self.show_button.setFocusPolicy(Qt.NoFocus)
        self.show_button.clicked.connect(self.show_button_clicked)
        self.index_to_widget[1] = self.show_button

        self.upload_button = QPushButton('UPLOAD', self)
        font = self.upload_button.font()
        font.setPointSize(60)
        self.upload_button.setFont(font)
        self.upload_button.setFocusPolicy(Qt.NoFocus)
        self.upload_button.clicked.connect(self.upload_button_clicked)
        self.index_to_widget[2] = self.upload_button

        # Input text that will be used as comments of log
        self.line_edit = QLineEdit(self)
        self.line_edit.setFont(QFont("Arial", 30))
        self.line_edit.setFixedHeight(40)
        self.line_edit.setPlaceholderText("Type comment or Esc to exit")
        self.line_edit.returnPressed.connect(self.process_input_text)
        self.line_edit.mousePressEvent = self.on_line_edit_click
        # self.line_edit.hide()

        # now that tabs are made you can pass messages to them
        self.systems_widget = SystemsWidget()
        handler1 = self.systems_widget
        self.msgs.logger.addHandler(handler1)

        layout = QGridLayout()

        layout.addWidget(self.status_label, 0, 0)
        layout.addWidget(self.log_button, 1, 0)
        layout.addWidget(self.show_button, 2, 0)
        layout.addWidget(self.upload_button, 3, 0)
        layout.addWidget(self.line_edit, 4, 0)
        layout.addWidget(self.systems_widget, 5, 0)
        layout.setRowStretch(5, 1)

        # Set size policy for buttons
        self.log_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.show_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.upload_button.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)
        self.systems_widget.setSizePolicy(QSizePolicy.Expanding, QSizePolicy.Expanding)

        # Apply the main layout to the central widget
        central_widget.setLayout(layout)

        self.widgets = [self.log_button, self.show_button, self.upload_button]

