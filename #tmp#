
class uploadThread(threading.Thread):
    def __init__(self, parent, files, start, note):
        super().__init__()
        self.parent = parent
        self.status_label = self.parent.status_label
        self.logger = self.parent.msgs
        self.drive = self.parent.drive
        self.files = files
        self.note = note
        self.position = start
        self.stopped = threading.Event()
        self.plot_file = files

    def run(self):
        for file_path in self.files:
            if not os.path.exists(file_path):
                self.status_label.setText(F"{file_path} missing")
                self.logger.logger.info(f"{file_path} missing")
                self.stop()
                return()

        print("RUN")
        self.status_label.setText(F"Upload log file")
        file_url = self.uploadToDrive(self.files[0], 'thing.txt')
        self.status_label.setText(F"Upload plot")
        plot_url = self.uploadToDrive(self.files[1], 'thing.png')
        self.status_label.setText(F"Insert into spreadsheet")

        data_length = self.dataLength(self.files[0])

        u1 = (F"=hyperlink(\"{plot_url}\", \"PLOT\")")
        u2 = (F"=hyperlink(\"{file_url}\", \"DATA\")")
        today = datetime.today()
        current_time = datetime.now()
        military_time = current_time.strftime("%H:%M")
        formatted_date = today.strftime("%m-%d-%y") + " " + military_time
        self.drive.add_row_to_spreadsheet(u1, u2, data_length, formatted_date, self.note)
        self.status_label.setText(F"Done with upload: {self.note}")
        for file_path in self.files:
            try:
                os.remove(file_path)
                self.logger.logger.info(f"File '{file_path}' deleted successfully.")
            except OSError as e:
                self.logger.logger.info(f"Error deleting the file '{file_path}': {e}")
                self.delete(file_path)
        self.stop()

    def stop(self):
        self.stopped.set()

    def uploadToDrive(self, output_file, dest_name):
        self.logger.logger.info("Uploading initiated")

        # List folders and files
        l = self.drive.list_files()

        want_to_delete = False
        for item in l:
            if item['name'] == dest_name and want_to_delete:
                self.drive.delete_files(item['id']) # good for testing
                self.logger.logger.info(F"DELETING {item} {item['id']}")

        file_id, file_url =  self.drive.upload_file(output_file, dest_name)
        self.logger.logger.info(F"file url {file_url}")

        self.drive.set_permissions(file_id)

        return(file_url)

    def dataLength(self, data_file):
        dict = self.openFile(data_file)

        if not dict.get("JSON BLOCK"):
            self.logger.logger.info("something is wrong with json, returning")
            return(None)
        d = dict["JSON BLOCK"]
        if "}{" in d:
            d = d.replace("}{", "}\n{") 
            
        json_lines = d.strip().split('\n')
        return(len(json_lines))

    def openFile(self, dname):
        data_dict = {}

        with open(dname, 'r') as file:
            key = None
            value = []

            for line in file:
                line = line.strip()

                # Check if the line starts with '[' and ends with ']'
                if line.startswith('[') and line.endswith(']'):
                    if key is not None:
                        data_dict[key] = "\n".join(value)
                        value = []

                    key = line[1:-1]  # Remove brackets
                else:
                    value.append(line)

            if key is not None:
                data_dict[key] = "\n".join(value)

            return(data_dict)



This was going in an interesting direction.
It was intended to simply run in the background and respond to
MQTT commands. It works pretty well but my android app
that ran MQTT decided to die, so that sucked. 